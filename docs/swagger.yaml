basePath: /
definitions:
  dto.CommentRequestBody:
    properties:
      message:
        type: string
      photo_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.SocialMediaUpdateResponse:
    properties:
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
    type: object
  dto.UserLoginRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UserRequestBody:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  entities.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photoID:
        type: integer
      updated_at:
        type: string
      userID:
        type: integer
    type: object
  entities.Photo:
    properties:
      caption:
        type: string
      comments:
        items:
          $ref: '#/definitions/entities.Comment'
        type: array
      created_at:
        type: string
      id:
        type: integer
      imageID:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      userID:
        type: integer
    type: object
  entities.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      userID:
        type: integer
    type: object
  entities.User:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: devyad@gmail.com
    name: API Support
  description: This is a simple services for managing cars
  license:
    name: Apace 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Insta Clone Api
  version: "1.0"
paths:
  /comment:
    get:
      consumes:
      - application/json
      description: Get details of all comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Comment'
      security:
      - Bearer: []
      summary: Get details
      tags:
      - Comment
    post:
      consumes:
      - application/json
      description: Create social media
      parameters:
      - description: create social media
        in: body
        name: entities.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/entities.SocialMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.SocialMedia'
      security:
      - Bearer: []
      summary: Post social media for a given id
      tags:
      - Social Media
  /comment/{Id}:
    delete:
      consumes:
      - application/json
      description: Delete the comment corresponding to the input id
      parameters:
      - description: ID of the comment to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
      security:
      - Bearer: []
      summary: Delete comment identified by given id
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: Get details of comment corresponding to the input id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Comment'
      security:
      - Bearer: []
      summary: Get details for a given id
      tags:
      - Comment
    patch:
      consumes:
      - application/json
      description: Update details of Comment corresponding to the input id
      parameters:
      - description: ID of the comment to be updated
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Comment'
      security:
      - Bearer: []
      summary: Update comment identified by given id
      tags:
      - Comment
  /photo:
    get:
      consumes:
      - application/json
      description: Get details of all photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Photo'
      security:
      - Bearer: []
      summary: Get details
      tags:
      - Photo
    post:
      consumes:
      - application/json
      description: Create Photo corresponding to the photo id in param
      parameters:
      - description: create photo
        in: body
        name: entities.Photo
        required: true
        schema:
          $ref: '#/definitions/entities.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Photo'
      security:
      - Bearer: []
      summary: Post Photo for a given id
      tags:
      - Photo
  /photo/{Id}:
    delete:
      consumes:
      - application/json
      description: Delete the photo corresponding to the input id
      parameters:
      - description: ID of the photo to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No photo
      security:
      - Bearer: []
      summary: Delete photo identified by given id
      tags:
      - Photo
    get:
      consumes:
      - application/json
      description: Get details of photo corresponding to the input id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Photo'
      security:
      - Bearer: []
      summary: Get details for a given id
      tags:
      - Photo
    patch:
      consumes:
      - application/json
      description: Update details of Photo corresponding to the input id
      parameters:
      - description: ID of the photo to be updated
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Photo'
      security:
      - Bearer: []
      summary: Update photo identified by given id
      tags:
      - Photo
  /social-media:
    get:
      consumes:
      - application/json
      description: Get details of all social media
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.SocialMedia'
      security:
      - Bearer: []
      summary: Get details
      tags:
      - Social Media
  /social-media/{Id}:
    delete:
      consumes:
      - application/json
      description: Delete the social media corresponding to the input id
      parameters:
      - description: ID of the social media to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
      security:
      - Bearer: []
      summary: Delete social media identified by given id
      tags:
      - Social Media
    get:
      consumes:
      - application/json
      description: Get details of social media corresponding to the input id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.SocialMedia'
      security:
      - Bearer: []
      summary: Get social media for a given id
      tags:
      - Social Media
    patch:
      consumes:
      - application/json
      description: Update details of social media corresponding to the input id
      parameters:
      - description: ID of the social media to be updated
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SocialMediaUpdateResponse'
      security:
      - Bearer: []
      summary: Update social media identified by given id
      tags:
      - Social Media
  /user/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: login
        in: body
        name: dto.UserLoginRequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Login User
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Register User
      parameters:
      - description: user register
        in: body
        name: dto.UserRequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Register User
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
